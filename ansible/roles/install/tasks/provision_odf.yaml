---
- name: Evaluate {{ odf_project }} namespace if not exists 
  k8s:
    api_version: v1
    kind: Namespace
    name: '{{ odf_project }}'
    resource_definition:
      labels:
        openshift.io/cluster-monitoring: 'true'
    state: present


- name: Evaluate ODF OperatorGroup
  k8s:
    state: present
    resource_definition: "{{ lookup('template', 'odf-operatorgroup.yaml.j2') }}"

- name: Evaluate ODF Subscription
  k8s:
    state: present
    resource_definition: "{{ lookup('template', 'odf-subscription.yaml.j2') }}"

- name: "Wait until InstallPlan is available"
  k8s_info:
    api_version: operators.coreos.com/v1alpha1
    kind: Subscription
    namespace: "{{ odf_project }}"
    name: odf-operator
  register: sub
  retries: 30
  delay: 10
  until:
   - sub.resources[0].status.installplan.name is defined

- name: Approve InstallPlan
  shell: 
    cmd: >
      oc patch installplan {{ sub.resources[0].status.installplan.name }} -n {{ odf_project }}  --type=json -p='[{"op": "replace", "path": "/spec/approved", "value": true}]'

- name: "Wait for NooBaa operator to be ready"
  k8s_info:
    api_version: v1
    kind: Deployment
    namespace: "{{ odf_project }}"
    name: "noobaa-operator"
  register: r_noobaa_operator_deployment
  retries: 100
  delay: 10
  until:
    - r_noobaa_operator_deployment.resources is defined
    - r_noobaa_operator_deployment.resources | length | int > 0
    - r_noobaa_operator_deployment.resources[0].status.availableReplicas is defined
    - r_noobaa_operator_deployment.resources[0].status.availableReplicas | int == r_noobaa_operator_deployment.resources[0].spec.replicas | int

- name: "Create NooBaa custom resource"
  k8s:
    state: present
    resource_definition: "{{ lookup('template', 'odf-noobaa.yaml.j2') }}"

- name: "Wait until NooBaa is active"
  k8s_info:
    api_version: noobaa.io/v1alpha1
    kind: noobaa
    namespace: "{{ odf_project }}"
    name: noobaa
  register: r_noobaa
  retries: 100
  delay: 10
  until:
   - r_noobaa.resources is defined
   - r_noobaa.resources | length | int > 0
   - r_noobaa.resources[0].status.phase is defined
   - r_noobaa.resources[0].status.phase == "Ready"

- name: Create S3 Buckets
  k8s:
    state: present
    resource_definition: "{{ lookup('template', 'odf-buckets.yaml.j2') }}"

- name: ({{ odf_project }}) Create Skupper Site
  k8s:
    namespace: "{{ odf_project }}"
    state: present
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: skupper-site
      data:
        name: s3-central

- name: ({{ odf_project }}) Create Skupper Site
  k8s:
    namespace: "{{ odf_project }}"
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        labels:
          skupper.io/type: connection-token-request
        name: s3-central-token

# - name: ({{ odf_project }}) Expose S3 Service via Interconnect
#   shell: 
#     cmd: >
#       oc annotate service s3 skupper.io/address=s3-central skupper.io/target=s3 skupper.io/proxy=http -n {{ odf_project }}

- name: ({{ odf_project }}) Obtain s3-central service
  k8s_info:
    api_version: v1
    kind: Service
    namespace: "{{ odf_project }}"
    name: s3-central
  register: s3_central_missing

- name: ({{ odf_project }}) Check Service s3-central does not exist yet
  set_fact:
    s3_central_missing: "{{ s3_central_missing.resources | length == 0 }}"

# Because you can't annotate the service more than once, the task is not IDEMPOTENT.
# To make it idempotent, we add the condition [when: s3_central_missing] 
- name: ({{ odf_project }}) Expose S3 Service via Interconnect
  when: s3_central_missing
  shell: 
    cmd: >
      oc annotate service s3 skupper.io/address=s3-central skupper.io/proxy=http -n {{ odf_project }} --overwrite=true


# # - name: Expose S3 with Service Interconnect
# #   k8s:
# #     state: present
# #     resource_definition: "{{ lookup('template', 'odf-service-interconnect.yaml.j2') }}"

# # - name: ({{ central_namespace }}) Expose Feeder Service via Interconnect
# #   shell: 
# #     cmd: >
# #       oc annotate service feeder skupper.io/proxy=http -n {{ central_namespace }}
